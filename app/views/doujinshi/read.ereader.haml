:javascript
  var files    = #{@files.to_json.html_safe};
  var cur_page = #{params[:page]};

  function setImgClass (el) {
    var pag_ratio = $(window).width() / $(window).height(); // https://stackoverflow.com/questions/3437786/get-the-size-of-the-screen-current-web-page-and-browser-window/3437825#3437825
    var img_ratio = el.naturalWidth / el.naturalHeight;     // https://www.w3schools.com/jsref/prop_img_naturalwidth.asp
    
    $(el).removeClass('fit-height fit-width');
    
    if (pag_ratio > img_ratio)
      $(el).addClass('fit-height');
    else
      $(el).addClass('fit-width');
    
    //$(el).removeClass('hidden');
  }//setImgClass
  
  function imgPath(page_num) {
    return $('.main').data('image-url') + '?' + $.param({file: files[page_num]});
  }//imgPath

  function turnPage (page_num) {
    var img_prev = $('img.prev'),
        img_curr = $('img.curr'),
        img_next = $('img.next');
    
    if (page_num > cur_page) {
      if (page_num < files.length) {
        // go forward
        $('#msg').addClass('hidden');
        
        img_curr.removeClass('curr').addClass('prev hidden');
        img_next.removeClass('next hidden').addClass('curr');
        img_prev.removeClass('prev').addClass('next hidden');
        
        // load next image
        img_prev.removeAttr('src');
        if ((page_num + 1) < files.length)
          img_prev.attr('src', imgPath(page_num + 1));
        
        cur_page = page_num;
      } else
        // show finished message
        showAndCenter('#msg');
    } else {
      if (page_num >= 0) {
        // go back
        $('#msg').addClass('hidden');
        
        img_curr.removeClass('curr').addClass('next hidden');
        img_prev.removeClass('prev hidden').addClass('curr');
        img_next.removeClass('next').addClass('prev hidden');
        
        // load previous image
        img_next.removeAttr('src');
        if ((page_num - 1) >= 0)
          img_next.attr('src', imgPath(page_num - 1));
        
        cur_page = page_num;
      }//if
    }//if-else
    
    $('#pag_num .cur').text(cur_page + 1);
    $('#pbar').css('width', ((cur_page + 1) / files.length * 100).toFixed(2) + 'vw');
    
    if ($('#msg').hasClass('hidden'))
      // save current page on server
      setTimeout(function () {
        $.ajax({
          url: $('.main').data('pages-url'),
          data: { page: cur_page },
          method: 'POST',
          dataType: 'json',
          cache: false,
        });
      }, 1000);
  }//turnPage
  
  function showAndCenter(el) {
    $(el).removeClass('hidden').
      css('left', $(window).width()  / 2 - $(el).outerWidth()  / 2).
      css('top' , $(window).height() / 3 - $(el).outerHeight() / 2);
  }//showAndCenter
  
  // manage page actions like an ebook reader: divide in three parts the screen
  function turnPageByClick (ev) {
    ev.stopImmediatePropagation();
    
    //$('#debug').html($(window).width() + 'screen w<br>' + ev.pageX + 'mouse x<br>' + $(document).scrollLeft() + 'scroll left');
    
    if ($(ev.target).parents('#menu').length > 0 || $('#menu').get(0) === ev.target)
      return; // noop if clicking within the menu
  
    var chunk_size = parseInt( $(window).width() / 3 );
    var x_coord = ev.pageX - $(document).scrollLeft();
    
    if (x_coord < chunk_size)          // tap on left    => go back 1 page
      turnPage(cur_page - 1);
    else if (x_coord > chunk_size * 2) // tap on right   => go forward 1 page
      turnPage(cur_page + 1);
    else                                // tap on middle  => open menu
      if ($('#menu').hasClass('hidden')) {
        $('#page').val(parseInt($('#pag_num .cur').text()) - 1);
        showAndCenter('#menu');
        $('table.help').removeClass('hidden');
      } else
        $('#menu, table.help').addClass('hidden');
  }//turnPageByClick
  
  function turnPageByKey (ev) {
    if (ev.ctrlKey || ev.altKey || $(document.activeElement).is(':input'))
      return true;
    
    if ($.inArray(ev.which, [8, 27, 37, 38, 33, 39, 40, 34, 32]) != -1)
      ev.preventDefault();
    
    if (ev.which == 27) // ESC = exit reading
      window.location = $('.back a').attr('href');
    else if (ev.which == 8 || ev.which == 37 || ev.which == 38 || ev.which == 33) // bkspc|left|up|pgUp
      turnPage(cur_page - 1);
    else if (ev.which == 39 || ev.which == 40 || ev.which == 34 || ev.which == 32) // right|down|pgDn|space
      turnPage(cur_page + 1);
  }//turnPageByKey
  
  function zoomImageToLevel (level) {
    $('#zoom').data('level', level);
    $('.main').css('width', level+'vw').css('height', level+'vh');
    $('body').css('overflow', level == 100 ? 'hidden' : 'auto');
    $('#zoom .perc').text(level == 100 ? '' : level+'%');
  }//zoomImageToLevel
  
  function zoomImage (ev) {
    ev.stopImmediatePropagation();
    
    var increment = $(ev.target).hasClass('inc') ? 50 : -50;
    var level     = parseInt($('#zoom').data('level')) + increment;
    
    if (100 <= level && level <= 300)
      zoomImageToLevel(level);
  }//zoomImage
  
  (function($){ $(function () {
    // initialize initial images
    $('img.prev').attr('src', imgPath(#{params[:page]}));
    $('img.curr').attr('src', imgPath(#{(params[:page] + 1) < @files.size ? (params[:page] + 1) : (@files.size - 1)}));
    
    // turn to the initial request page
    turnPage(#{params[:page]});
    
    // bind reading controls to mouse & keyboard
    $('body').
      on('click', turnPageByClick).
      on('keydown', turnPageByKey);
    
    // bind zoom control
    $('#zoom span').on('click', zoomImage);
    
    // bind background color change
    $('a.set-bg-color').click(function (ev) {
      ev.preventDefault();
      $('div.main').attr('class', 'main bg-' + $(this).data('color'));
    });
    
    // fix a Google Chrome mobile glitch that sometimes clips the bottom of portrait images
    setTimeout(function () { zoomImageToLevel(100) }, 250);
  }); })(jQuery)

- cur_bg_color = is_ereader_browser? ? Setting::READING_BG_COLORS.first : Setting[:reading_bg_color]
.main{class: "bg-#{cur_bg_color}",
      data: { image_url: image_doujin_path(@doujin, format: ''),
              pages_url: read_pages_doujin_path(@doujin) }}
  %img.prev(src="" class="page hidden" onload="setImgClass(this)")
  %img.curr(src="" class="page hidden" onload="setImgClass(this)")
  %img.next(src="" class="page hidden" onload="setImgClass(this)")
  
#msg.hidden Finished

#pbar-bg
#pbar

#pag_num
  %span.cur>= params[:page] + 1
  \/
  %span.tot>= @files.size

%table.help.hidden
  %tr
    %td(width="33%")
      %span Previous
    %td(width="33%")
      %span Menu
    %td(width="33%")
      %span Next

-#debug

#zoom{data: {level: 100}}
  .perc
  .controls
    %span.dec> &minus;
    %span.inc> &plus;

#menu.hidden
  .title
    reading
    %br/
    men&ugrave;
  .jump
    = form_with url: read_doujin_path(@doujin), method: :get do |f|
      = hidden_field_tag :from_format, params[:from_format]
      jump to
      = select_tag :page,
        options_for_select(@files.size.times.map{|i| [i+1, i] }, params[:page]),
        onchange: %Q|this.form.submit()|
  
  - Setting::READING_BG_COLORS.each do |color|
    %a.set-bg-color.button{href: '#', class: "bg-#{color}", data: {color: color}}<>= color[0].upcase
  
  .back= link_to 'back to details', doujin_path(@doujin, format: params[:from_format]), class: :button
