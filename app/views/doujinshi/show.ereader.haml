%h3 Doujin details

= render partial: 'fav_js_links'

%table.doujin
  %tr
    %td.w1.cover
      %img.thumb.async_load{data: {url: doujin_path(@doujin, format: :jpg)}}
    %td.details
      %table
        = render 'show_info'
        %tr
          %th Score
          %td
            = form_with url: score_doujin_path(@doujin) do |f|
              = f.hidden_field :from_author, value: params[:from_author]
              = f.hidden_field :from_circle, value: params[:from_circle]
              = f.hidden_field :score, value: @doujin.score.to_i
              .scoring
                - (1..10).each do |i|
                  %span.set-score{data: {score: i}, class: ('set' if i <= @doujin.score.to_i)}
                    &#9825;
                &nbsp;&nbsp;
                %span.clear-score{data: {score: 0}}
                  &times;
            :javascript
              jQuery(function () {
                jQuery('.scoring span').click(function () {
                  jQuery('#score').val( jQuery(this).data('score') ).get(0).form.submit();
                });
              })
      
      .actions
        - lbl_read = @doujin.read_pages.to_i > 0 ? "Read (#{@doujin.percent_read.round}%)" : :Read
        = link_to lbl_read, read_doujin_path(@doujin, page: @doujin.next_page_to_read, from_format: :ereader), class: :button
        = link_to '&star; Fave'.html_safe,
          fav_toggle_doujinshi_path(type: :Doujin, id: @doujin.id),
          class: "button fav #{'is-favorite' if @doujin.favorite?}"
        - s = Shelf.find_by(name: 'ereader')
        - if s.try(:doujinshi_shelves).try(:find_by, doujin_id: @doujin.id)
          = link_to '&minus;Shelf'.html_safe,
            shelf_doujin_path(@doujin, rm_shelf_id: s.id), class: :button
        - else
          = link_to '&plus;Shelf'.html_safe,
            shelf_doujin_path(@doujin, shelf_id: s.try(:id).to_i, shelf_name: 'ereader'), class: :button

      .actions
        = link_to '&nabla;EPUB'.html_safe, epub_doujinshi_path(convert: @doujin.id), class: :button
        = link_to '&nabla;CBZ' .html_safe, doujin_path(@doujin, format: :cbz), class: :button
        &nbsp;&nbsp;&nbsp;
        = link_to '&empty;Del' .html_safe, delete_doujin_path(@doujin, params.permit(:from_author, :from_circle).to_h), class: :button
  
  - if @doujin.num_images > 1
    %tr
      %td.samples(colspan="2")
        - 1.upto([3, @doujin.num_images - 1].min).each do |i|
          %img.thumb.async_load{data: {url: doujin_path(@doujin, format: :jpg, page: i)}}

%br

:ruby
  url_params = if %w{ artbook magazine }.include?(@doujin.category)
    { tab: @doujin.category, folder: @doujin.file_folder }
  elsif params[:from_author].present?
    { tab: :author, author_id: params[:from_author] }
  elsif params[:from_circle].present?
    { tab: :circle, circle_id: params[:from_circle] }
  end

= link_to 'Back', doujinshi_path(url_params.to_h.merge letter: params[:letter]),
  class: :button, style: "float: right"
