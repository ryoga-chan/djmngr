- search_term = @fname.tokenize_doujin_filename.join(' ')

= form_with url: set_property_process_path do |f|
  = f.hidden_field :tab, value: params[:tab]
  = f.hidden_field :score, value: @info[:score]
  
  .columns
    .column.is-8
      .scroller{class: ('two_titles' if @fname != @fname.to_romaji)}
        .name_orig.mb-1
          %span.icon.in-text-small.mr-2
            %i.mi.mi-small(title="original filename") photo_filter
          = @fname

        - if @fname != @fname.to_romaji
          .name_romaji.mb-1
            %span.icon.in-text-small.mr-2
              %i.mi.mi-small(title="kakasi filename") translate
            = @fname.to_romaji #alt_readings:true, furigana_mode: true

        .file-type.mb-1
          %span.icon.in-text-small.mr-2
            %i.mi.mi-small(title="archive type") local_offer
          
          %span.mr-3.tag.has-text-warning
            - if @info[:file_type] == 'doujin'
              = @info[:file_type]
              &middot;
              = @info[:doujin_dest_type]
            - else
              = @info[:file_type]
          
          - if @info[:relative_path].one?
            %span.mr-3= render partial: 'file_actions', locals: {fname: @info[:relative_path].first}
          
          = links_to_search_engines search_term, target: :_blank
      
      .other-settings.mb-1
        %span.icon.in-text-small.mr-2(onclick="jQuery.myapp.autotag_titles()")
          %i.mi.mi-small(title="other properties") settings
        
        .select.setting(title="language")= f.select :language,
          options_for_select(Doujin::LANGUAGES, @info[:language]),
          {}, class: "input is-small vmiddle"
        
        .select.setting(title="censored?")= f.select :censored,
          options_for_select({'uncens' => false, 'cens' => true}, @info[:censored]),
          {}, class: "input is-small vmiddle"
        
        .select.setting(title="colorized?")= f.select :colorized,
          options_for_select({'B&W' => false, 'color' => true}, @info[:colorized]),
          {}, class: "input is-small vmiddle"
        
        .select.setting(title="reading direction")= f.select :reading_direction,
          options_for_select({'right2left' => 'r2l', 'left2right' => 'l2r'}, @info[:reading_direction]),
          {}, class: "input is-small vmiddle"

        - if @info[:file_type] != 'artbook'
          .select.setting(title="media type")= f.select :media_type,
            options_for_select(Doujin::MEDIA_TYPES, @info[:media_type]),
            {}, class: "input is-small vmiddle"
        
      .notes.mb-1
        %span.icon.in-text-small.mr-2(onclick="if (confirm('Clear notes?')) jQuery('#notes').val('')")
          %i.mi.mi-small(title="notes") comment
        = f.text_area :notes, value: @info[:notes], placeholder: 'notes',
          class: 'textarea fillwidth is-size-8', maxlength: 255,
          style: "height: 2.8rem" # is-size-8 = 0.7rem  ==>  0.7rem * 4 rows = 2.8rem

      .scoring-stars.mb-1
        %span.icon.in-text-small.mr-2
          %i.mi.mi-small(title="quality score") favorite
        %span.scoring.fillwidth
          - (1..10).each do |i|
            - if i == 6
              %br.is-hidden-desktop
              %span.icon.mr-1.is-hidden-desktop
            %span.icon.is-medium.in-text.set-score.mr-4.mb-5{data: {score: i},
              class: (i <= @info[:score].to_i ? 'has-text-warning' : ''), title: i}
              %i.mi.mi-medium= i <= @info[:score].to_i ? :star_rate : :star_outline
              %span= i
          %span.icon.is-medium.in-text.clear-score{data: {score: 0}}
            %i.mi.mi-medium(title="clear") clear

      .subfolder.mb-1
        %span.icon.in-text-small.mr-2
          %i.mi.mi-small(title="destination subfolder") create_new_folder
        - if @subfolders.many?
          %span.select.vmiddle.fillwidth-3bt= f.select :sel_subfolder,
            options_for_select(@subfolders, @info[:subfolder]), {},
            class: "input is-small vmiddle", title: 'copy folder name from an existing one',
            onchange: %Q| $('#subfolder').val($(this).val() == '-custom name-' ? '' : $(this).val()) |
          %br
          %span.icon.in-text-small.mr-2
            %i.mi.mi-small(title="spacer") subdirectory_arrow_right
        = f.text_field :subfolder, value: @info[:subfolder], placeholder: 'destination subfolder',
          class: 'input is-small fillwidth-3bt'
        = link_to '#', class: 'button is-small', onclick: %Q|$('#subfolder').val(''); $('#sel_subfolder').val('-custom name-'); return false| do
          %span.icon
            %i.mi.mi-small(title="clear subfolder") clear
        = link_to '#', class: 'button is-small ml-1', onclick: %Q|$.myapp.titles_to_lowercase(); return false| do
          %span.icon
            %i.mi.mi-small(title="convert all titles to downcase") text_rotate_vertical
        
        - eh_data = { term: search_term, img: 'a[name="cover"] + a img',
            title: @fname, title_kakasi: @fname.to_romaji, info: @cur_info }
        = link_to '#', class: 'button button-image is-small ml-1 ehentai-search', data: eh_data do
          = image_tag 'eh.svg', class: :sfw, title: 'E-Hentai title search & fill'

      .dest-titlename.nowrap.mb-1
        %span.icon.in-text-small.mr-2(onclick="$('#dest_filename').val( $('#dest_title').val()+'.zip' )")
          %i.mi.mi-small(title="destination title kanji/original") raw_on
        = f.text_field :dest_title, value: @info[:dest_title],
          placeholder: 'dest. title kanji/original', tabindex: 100,
          class: 'input is-small fillwidth-2bt',
          data: { orig_name: @info[:orig_title] }
        = link_to '#', class: 'button is-small', onclick: %Q|$.myapp.translitterate_raw_title(); return false| do
          %span.icon
            %i.mi.mi-small(title="translitterate raw title to romaji") translate
        = link_to '#', class: 'button is-small ml-1',
          onclick: %Q|var el=$('#dest_title'); el.val(el.data('orig-name')); return false| do
          %span.icon
            %i.mi.mi-small(title="restore initial value") restore
      
      .dest-titlename.nowrap.mb-1
        %span.icon.in-text-small.mr-2(onclick="$('#dest_filename').val( $('#dest_title_romaji').val()+'.zip' )")
          %i.mi.mi-small(title="destination title romaji/translitterated") title
        = f.text_field :dest_title_romaji, value: @info[:dest_title_romaji],
          placeholder: 'dest. title romaji/translitterated', tabindex: 101,
          class: 'input is-small fillwidth'
      
      .dest-titlename.nowrap.mb-1
        %span.icon.in-text-small.mr-2(onclick="$('#dest_filename').val( $('#dest_title_eng').val()+'.zip' )")
          %i.mi.mi-small(title="destination title english/translated") translate
        = f.text_field :dest_title_eng, value: @info[:dest_title_eng],
          placeholder: 'dest. title english/translated', tabindex: 102,
          class: 'input is-small fillwidth'
      
      .dest-filename.nowrap.mb-1
        %span.icon.in-text-small.mr-2
          %i.mi.mi-small(title="destination filename") insert_drive_file
        = f.text_field :dest_filename, value: @info[:dest_filename],
          placeholder: 'dest. filename', tabindex: 103,
          class: 'input is-small fillwidth-1bt',
          data: { orig_name: @info[:orig_dest_filename] }
        = link_to '#', class: 'button is-small',
          onclick: %Q|var el=$('#dest_filename'); el.val(el.data('orig-name')); return false| do
          %span.icon
            %i.mi.mi-small(title="restore initial value") restore
      
      - if @suggestions
        .suggested-filenames.mb1.ml-6(title="suggested filenames" style="max-height: 10rem; overflow: auto;")
          %table.table.is-striped
            - @suggestions.each do |lbl|
              %tr
                %td= link_to lbl, '#', title: 'copy this suggestion',
                  onclick: %Q|jQuery('#dest_filename').val( jQuery(this).text().trim() + '.zip' ); return false|

      .final-path.mb-1
        %span.icon.in-text-small.mr-2
          %i.mi.mi-small(title="destination path") folder
        - if @collision_info
          %span.tag.is-danger= "ALREADY EXIST!"
        - Doujin.dest_path_by_process_params(@info).split(File::SEPARATOR, 3)[1..-1].each_with_index do |path, i|
          = File::SEPARATOR
          %span{class: ('has-text-warning' if i == 0)}<>= path
          
      
      - if @collision_info
        .overwrite-confirm.mb-1
          %span.icon.in-text-small.mr-2
            %i.mi.mi-small(title="confirm overwrite") warning
          %span.has-text-danger
            = f.check_box :overwrite, {checked: @info[:overwrite], include_hidden: true}
            = label_tag :overwrite, "overwrite file in the collection"
    
      .actions.field.is-grouped.ml-6
        .field.has-addons
          %p.control
            = f.button class: 'button is-primary is-rounded', value: :save do
              %span.icon
                %i.mi.mi-small send
              %span update
          %p.control
            = link_to({tab: :dupes, rematch_cover: true}, class: 'button is-warning is-rounded') do
              %span.icon
                %i.mi.mi-small image_search
              %span rematch
          %p.control
            = f.button class: 'button is-success is-rounded', value: :finalize do
              %span.icon
                %i.mi.mi-small gavel
              %span finalize
            -#= link_to finalize_volume_process_path, method: :post,
            -#  class: 'button is-success is-rounded' do
            -#  %span.icon
            -#    %i.mi.mi-small gavel
            -#  %span finalize

    .column.has-text-centered
      - rotate_bt_l = capture do
        %span.control
          = link_to edit_cover_process_path(tab: params[:tab], run: :rotate, dir: :left),
            class: "button is-small is-rounded" do
            %span.icon.is-small
              %i.mi rotate_left
      - rotate_bt_r = capture do
        %span.control
          = link_to edit_cover_process_path(tab: params[:tab], run: :rotate, dir: :right),
            class: "button is-small is-rounded" do
            %span.icon.is-small
              %i.mi rotate_right
        
      - html_cover = capture do
        - if @info[:landscape_cover] && @info[:landscape_cover_method] != :none
          %figure.image.is2by3.mb-2
            %a(name="cover")
            = link_to show_image_process_path(id: @info[:working_dir], path: @info[:images].first[:src_path]), target: :_blank do
              = thumbnail_tag ProcessArchiveDecompressJob.cover_path(@dname, @info), title: 'cropped cover'
          .control.has-icons-left.mb-2
            - crop_methods = ProcessArchiveDecompressJob::CROP_METHODS.map{|m| ["crop #{m}", m] }
            - crop_methods += (1..99).map{|p| ["crop @ #{p}%", p] }
            .select.w100= f.select :cover_crop_method,
              options_for_select(crop_methods, @info[:landscape_cover_method].to_s), {},
              class: 'w100', onchange: %Q| this.form.submit() |
            .icon.is-small.is-left
              %i.mi(title="crop landscape cover") crop
          .field.has-addons.is-justify-content-center
            = rotate_bt_l
            %span.control.is-hidden-touch
              = link_to edit_cover_process_path(run: :duplicate_edit, format: :json), remote: true, data: {spin_time: 15},
                class: "button run-progr is-small is-rounded", target: :_blank do
                %span.icon.is-small
                  %i.mi edit
            %span.control.is-hidden-touch
              = link_to edit_cover_process_path(tab: params[:tab], run: :refresh),
                class: "button is-small is-rounded" do
                %span.icon.is-small
                  %i.mi refresh
            = rotate_bt_r
        - else
          - cover = @info[:images].first
          %figure.image.is2by3
            %a(name="cover")
            - if @info[:images].any?
              = link_to show_image_process_path(id: @info[:working_dir], path: cover[:src_path]), target: :_blank do
                = thumbnail_tag ProcessArchiveDecompressJob.cover_path(@dname, @info),
                  title: "#{cover[:dst_path]} @ #{number_to_human_size cover[:size]}\n↪#{cover[:src_path]}"
            - else
              %img(src="/not-found.png")
          - if @info[:images].any?
            .field.has-addons.is-justify-content-center
              = rotate_bt_l
              = rotate_bt_r
      
      - if @collision_info
        .columns
          .column.is-6(style="border-right: 1px solid transparent")
            .descr this file
            %span.tag.is-info.mb-1= @collision_info[:current]
            .this_cover= html_cover
          .column.is-6(style="border-left: 1px solid red")
            .descr
              - if dj_id = @collision_info[:doujin].try(:id)
                - score_lbl = " / #{@collision_info[:doujin].score}&star;" if @collision_info[:doujin].score.to_i != 0
                = link_to "ID ##{dj_id}#{score_lbl}".html_safe, doujin_path(id: dj_id), target: :_blank
              - else
                collection
            %span.tag.is-info.mb-1= @collision_info[:collection]
            %figure.image.is2by3.coll_cover= image_tag doujin_path(id: @collision_info[:doujin].try(:id).to_i, format: :webp), title: "collision cover"
      - else
        .tag.is-info.mb-2= @cur_info
        = html_cover
