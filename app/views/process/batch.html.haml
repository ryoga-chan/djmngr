.container.is-max-desktop
  .actions-danger.has-text-centered(style="float: right")
    = link_to(batch_process_path(id: params[:id]),
        method: :delete, data: { confirm: 'Delete this batch job?' },
        class: 'button is-danger is-light is-rounded mb-2', title: 'delete batch job') do
      %span.icon
        %i.mi delete
      %span Delete

  - if @info[:started_at]

    - @info[:progress] ||= {}

    .title
      Batch processing
      - if ts = @info[:progress][:completed_at]
        completed at
        %span.is-1= ts.strftime '%F %H:%M'
      - else
        started at
        %span.is-1= @info[:started_at].strftime '%F %H:%M'
    .subtitle= "#{@info[:files].size} archives"
    
    .field.has-addons.is-justify-content-right
      .control
        = link_to '#', onclick: %Q|jQuery('.column .cover').toggleClass('is-hidden')|,
          class: 'button is-rounded is-small' do
          %span.icon.is-small
            %i.mi compare
          %span Covers
    
    - unless @info[:progress].key?(:completed_at)
      .batch-status
        .perc= "#{@info[:progress].size} / #{@info[:files].size} archives processed"
        
        .actions
          = link_to(batch_process_path(id: params[:id], undo: true), method: :delete,
            class: 'button is-success is-light is-rounded my-2', title: 'undo batch processing')  do
            %span.icon
              %i.mi.mi-small undo
            %span Stalled? Undo!
      
      :javascript
        setTimeout(function () { window.location.reload(); }, 5000)
      
    -# show errors on top
    - names = (@info[:progress].keys - [:completed_at]).sort
    - names.partition{|k| @info[:progress][k][:errors] }.flatten.each do |name|
      - result = @info[:progress][name]
      - fname = Pathname.new(name).relative_path_from(Setting['dir.to_sort']).to_s
      .columns.mx-0.my-0.pt-2{class: cycle('has-background-dark', '')}
        .column.py-0.is-2
          - if result[:id]
            .tags.has-addons.is-flex-wrap-nowrap.mx-0.my-0
              %span.tag.is-success OK
              %span.tag.is-info= result[:id]
          - else
            - result[:errors].to_a.each do |err|
              .tags.has-addons.is-flex-wrap-nowrap.mx-0.my-0
                %span.tag.is-danger KO
                %span.tag.is-info= err
          %figure.image.is2by3.cover.is-hidden= inline_image_tag :'image/webp', @info[:thumbs][fname][:base64]
        .column.py-0
          - if result[:id]
            = link_to fname, doujin_path(id: result[:id])
          - else
            - if File.exist?(name)
              = link_to fname, action: :edit, id: ProcessArchiveDecompressJob.file_hash(name)
            - else
              = fname

    %hr
    
  - elsif @info[:prepared_at]

    .title
      Batch processing prepared at
      %span.is-1= @info[:prepared_at].strftime '%F %H:%M'
    .subtitle= "#{@info[:files].size} archives"
    
    = form_with url: batch_process_path(id: params[:id]), scope: :options, method: :get,
      html: { class: "mb-4" } do |f|
      .columns.mb-0
        .column.field.has-addons.mb-0
          - last_dj = Doujin.order(:created_at).last
          
          .control
            = f.number_field :doujin_id,
              value: (@info[:options].try('[]', :doujin_id) || last_dj&.id),
              placeholder: 'doujin ID', class: "input is-rounded is-small"
          .control
            = link_to '#', title: "search a doujin", class: 'button is-small js-finder',
              data: { url: '/doujinshi/js_finder', term: @info[:titles].keys.first.first_author_from_filename } do
              %span.icon
                %i.mi search
          .control
            = link_to '#', title: "view doujin", target: :_blank,
              onclick: "jQuery(this).attr('href', '/doujinshi/'+jQuery('#options_doujin_id').val())",
              class: 'button is-small' do
              %span.icon
                %i.mi visibility
          .control
            - list, cur = %w{ prepare process }, @info[:options].try('[]', :batch_method)
            .select= f.select :batch_method, options_for_select(list, cur), {}, class: "input is-rounded is-small"
          .control
            - list = (1..10).map{|i| ["#{i} &star;".html_safe,i] }.unshift(['score=none', nil])
            .select= f.select :score,
              options_for_select(list, @info[:options].try('[]', :score)), {},
              class: "input is-rounded is-small"
        
        .column.field.has-addons.mb-0
          .control
            - list, cur = {'lang=auto' => nil}.merge(Doujin::LANGUAGES), @info[:options].try('[]', :lang)
            .select= f.select :lang, options_for_select(list, cur), {}, class: "input is-rounded is-small"
          .control
            - list, cur = [['chroma=auto', nil], ['B&W', false], ['color', true]], @info[:options].try('[]', :col)
            .select= f.select :col, options_for_select(list, cur), {}, class: "input is-rounded is-small"
          .control
            - list, cur = Doujin::MEDIA_TYPES.map{|k| [k,k] }.unshift(['media=auto', nil]), @info[:options].try('[]', :mt)
            .select= f.select :mt, options_for_select(list, cur), {}, class: "input is-rounded is-small"
          .control
            - list, cur = [['cens=auto', nil], ['censored', true], ['uncensored', false]], @info[:options].try('[]', :cens)
            .select= f.select :cens, options_for_select(list, cur), {}, class: "input is-rounded is-small"
          .control
            - list, cur = [['collision=abort', false], ['overwrite', true]], @info[:options].try('[]', :overwrite)
            .select= f.select :overwrite, options_for_select(list, cur), {}, class: "input is-rounded is-small"
      .field.has-addons.is-justify-content-center
        .control
          = link_to '#', onclick: %Q|jQuery('.column.cover').toggleClass('is-hidden')|,
            class: 'button is-rounded is-small' do
            %span.icon.is-small
              %i.mi compare
            %span Covers
        .control.is-hidden-mobile
          = link_to batch_process_path(id: params[:id], run: :batch_comics_viewer, format: :json),
            title: 'read all with external viewer',
            remote: true, class: 'button run-progr is-info is-rounded is-small' do
            %span.icon.is-small
              %i.mi slideshow
            %span Play
        .control
          = f.button type: :submit, value: :save, class: 'button is-rounded is-link is-small' do
            %span.icon.is-small
              %i.mi save
            %span Save
        .control
          = f.button type: :submit, value: :start, class: 'button is-rounded is-primary is-small' do
            %span.icon.is-small
              %i.mi send
            %span Start

    -# order entries by the custom title
    - @info[:titles].sort_by_value.map{|k,v| k}.each_with_index do |name, idx|
      - files = @info[:files][name]
      .columns
        .column.is-2.cover.has-text-centered
          %figure.image.is2by3= inline_image_tag :'image/webp', @info[:thumbs][name][:base64]
          .tags.has-addons.is-justify-content-center.mt-1
            %span.tag.is-info
              = files.size
              P
            %span.tag.is-info.is-light
              = number_to_human_size @info[:sizes][name]
        .column
          .name
            %a{name: Digest::MD5.hexdigest(name)}
            = link_to('ðŸ—‘', batch_process_path(id: params[:id], remove: name),
              method: :delete, data: { confirm: 'Remove this entry?' },
              class: 'has-text-danger', title: 'remove from batch')
            %span= render partial: 'file_actions', locals: {fname: name}
            = name
          .custom-name
            = text_field_tag :title, @info[:titles][name], id: '',
              class: 'update-name w100', tabindex: (1000+idx),
              data: { url: batch_process_path, path: name }
          - if @info[:thumbs][name][:landscape]
            .actions.my-1
              .tags.has-addons
                %span.tag.is-danger LANDSCAPE COVER
                %span.tag
                  = link_to batch_process_path(id: params[:id], keep_cover: name) do
                    %span.icon-text
                      %span.icon
                        %i.mi= @info[:thumbs][name][:keep_cover] ? :check_box : :check_box_outline_blank
                      %span keep it cropped like this
          .files
            %pre.is-size-9= files.join "\n"
    
    %hr
    
  - else

    .title Batch processing
    .title.is-4= "#{@info[:files].size} archives"
    - done = @info[:files].select{|name, entries| entries }
    .title.is-6= "Analyzing file names, please wait ... #{done.size}/#{@info[:files].size}"
    
    :javascript
      setTimeout(function () { window.location.reload(); }, 5000)

  = link_to 'show metadata', '#', class: 'button is-info',
    onclick: %Q|$(this).hide().next().removeClass('is-hidden'); return false|
  - @info.delete :files
  - @info.delete :thumbs
  %pre.debug-info.is-hidden= PP.pp @info, ''
