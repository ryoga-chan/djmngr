.container.is-max-desktop
  - if @refreshing
    .info1= @refresh_progress[0]
    .info2= @refresh_progress[1]
    .info3.is-size-7= @refresh_progress[2]
    .columns.mt-2
      .column.is-3
        %progress.progress.is-small.is-primary
    
    = link_to(process_index_path(job: :clear_job),
      class: 'button is-success is-light is-rounded mt-2', title: 'clear stale job files')  do
      %span.icon
        %i.mi.mi-small undo
      %span Stalled? Reset!
    
    :javascript
      setTimeout(function () { window.location.reload(); }, 5000)
  - else
    - if @batches.any?
      .title.is-size-4= "Batch processing (#{@batches.size})"

      %table.table.is-striped.is-hoverable.ml-4
        %tbody
          - @batches.each do |f|
            %tr
              %td= link_to('ðŸ—‘', batch_process_path(id: f[:hash]),
                method: :delete, data: { confirm: 'Delete this batch job?' },
                class: 'has-text-danger', title: 'delete batch job')
              %td
                = link_to batch_process_path(id: f[:hash]) do
                  #{f[:time].strftime('%F %T')} / 
                  %span.is-family-monospace #{f[:hash][0..10]}...

    - if @preparing.any?
      .title.is-size-4= "Processing archives (#{@preparing.size})"

      %table.table.is-striped.is-hoverable.ml-4
        %tbody
          - @preparing.each do |f|
            %tr
              %td= link_to('ðŸ—‘', {action: :delete_archive_cwd, id: f[:working_dir]},
                method: :delete, data: { confirm: 'Delete this processing folder?' },
                class: 'has-text-danger', title: 'delete processing folder')
              %td.has-text-right= number_to_human_size f[:tot_size]
              %td= link_to f[:relative_path], action: :edit, id: f[:working_dir]

    -# files listing
    = form_with url: prepare_batch_process_index_path, method: :post do |f|
      .title.is-size-4= "Processable archives (#{@files.total_count})"
      
      .columns.my-0
        .column.py-0.pb-2
          %span Sort files by
          .select(style="vertical-align: middle")= select_tag :sort_by,
            options_for_select(ProcessIndexRefreshJob::ORDER, params[:sort_by]),
            onchange: %Q|window.location = '/process?sort_by='+jQuery(this).val()|
        .column.py-0
          .actions
            .field.has-addons.mb-4.is-justify-content-end
              .control
                = link_to '#', onclick: %Q|jQuery('tr.sample').toggleClass('is-hidden')|,
                  class: 'button is-small' do
                  %span.icon.is-small
                    %i.mi compare
                  %span thumbs
              .control
                = link_to '#', class: 'bt-batch button is-small',
                  onclick: %Q|jQuery('.batch-bt, .batch-rm, td.rm-or-batch > *, td.batch, .bt-index').toggleClass('is-hidden'); return false| do
                  %span.icon.is-small
                    %i.mi.mi-small inventory_2
                  %span batch
              .control.batch-bt.is-hidden
                = link_to '#', class: 'bt-toggle-all button is-small',
                  onclick: %Q|jQuery('td.rm-or-batch :checkbox').each(function(){ $(this).prop('checked', !$(this).prop('checked')) }).first(); jQuery.app.update_tot_filesize(); return false| do
                  %span.icon.is-small
                    %i.mi select_all
                  %span toggle
              .control.batch-rm.is-hidden
                -# # https://stackoverflow.com/questions/3027149/how-do-i-create-multiple-submit-buttons-for-the-same-form-in-rails
                = f.button(type: :submit, class: 'button is-small is-danger',
                           formaction: batch_delete_process_index_path,
                           data: {confirm: 'Delete selected files?'}) do
                  %span.icon.is-small
                    %i.mi delete_forever
                  %span delete
              .control.batch-bt.is-hidden
                = f.button type: :submit, class: 'button is-link is-small' do
                  %span.icon.is-small
                    %i.mi send
                  %span prepare
                  %span.tot-file-size.is-size-8.ml-1
              .control
                = link_to({job: :refresh}, class: 'bt-index bt-reindex button is-info is-small',
                          data: {confirm: 'Rescan to-sort folder?'}) do
                  %span.icon.is-small
                    %i.mi.mi-small refresh
                  %span refresh
              .control
                = link_to({job: :group}, class: 'bt-index bt-groups button is-info is-small',
                          data: {confirm: 'Compare all covers enabling "sort by group" mode?'}) do
                  %span.icon.is-small
                    %i.mi.mi-small preview
                  %span group
              .control
                = link_to({job: :preview, sort_by: params[:sort_by], page: params[:page]},
                          data: {confirm: 'Generate previews for two pages of entries?'},
                          class: 'bt-index bt-preview button is-info is-small') do
                  %span.icon.is-small
                    %i.mi.mi-small preview
                  %span preview
      
      - if @files.empty?
        %em no files to process
      - else
        = page_entries_info @files

        %table.to_process.table.is-striped.is-hoverable.ml-4
          %tbody
            - idx = 0
            - @files.each do |f|
              - if @group_sort
                %tr.sep
                  %td.has-background-grey-light(colspan=4)
                    .columns.is-mobile.is-vcentered
                      .column.is-2
                        %hr.has-background-grey
                      .column.is-4.has-text-centered.has-text-grey.has-text-weight-bold
                        = "##{f.id} (#{f.processable_doujin_dupes_childs.size + 1})"
                      .column
                        %hr.has-background-grey
                %tr
              = render partial: 'index_row', locals: { f: f, idx: idx+=1 }
              - if @group_sort
                - f.processable_doujin_childs.sort{|a,b| a.name <=> b.name }.each do |f_child|
                  - pdd = f.processable_doujin_dupes_childs.detect{|pddc| pddc.pd_child_id == f_child.id }
                  = render partial: 'index_row', locals: { f: f_child, idx: idx+=1, pair_data: pdd }
                
                - f.doujinshi.sort{|a,b| a.name <=> b.name }.each do |f_child|
                  - pdd = f.processable_doujin_dupes_childs.detect{|pddc| pddc.doujin_id == f_child.id }
                  = render partial: 'index_row', locals: { f: f_child, idx: idx+=1, pair_data: pdd }
        
        = paginate @files, params: {sort_by: params[:sort_by]}
