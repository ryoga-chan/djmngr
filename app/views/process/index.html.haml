.container.is-max-desktop
  - if @refreshing
    .info1= @refresh_progress[0]
    .info2= @refresh_progress[1]
    .info3.is-size-7= @refresh_progress[2]
    .columns.mt-2
      .column.is-3
        %progress.progress.is-small.is-primary
    
    = link_to(process_index_path(job: :clear_job),
      class: 'button is-success is-light is-rounded mt-2', title: 'clear stale job files')  do
      %span.icon
        %i.mi.mi-small undo
      %span Stalled? Reset!
    
    :javascript
      setTimeout(function () { window.location.reload(); }, 5000)
  - else
    - if @batches.any?
      .title.is-size-4= "Batch processing (#{@batches.size})"

      %table.table.is-striped.is-hoverable.ml-4
        %tbody
          - @batches.each do |f|
            %tr
              %td= link_to('ðŸ—‘', batch_process_path(id: f[:hash]),
                method: :delete, data: { confirm: 'Delete this batch job?' },
                class: 'has-text-danger', title: 'delete batch job')
              %td
                = link_to batch_process_path(id: f[:hash]) do
                  #{f[:time].strftime('%F %T')} / 
                  %span.is-family-monospace #{f[:hash][0..10]}...

    - if @preparing.any?
      .title.is-size-4= "Processing archives (#{@preparing.size})"

      %table.table.is-striped.is-hoverable.ml-4
        %tbody
          - @preparing.each do |f|
            %tr
              %td= link_to('ðŸ—‘', {action: :delete_archive_cwd, id: f[:working_dir]},
                method: :delete, data: { confirm: 'Delete this processing folder?' },
                class: 'has-text-danger', title: 'delete processing folder')
              %td.has-text-right= number_to_human_size f[:tot_size]
              - lbl = f[:relative_path].one? ? f[:relative_path].first : f[:title]
              - lbl = "ðŸ“¥ #{h File.basename(lbl, '.zip')}" if f[:file_path].first.start_with?(ImageToDummyArchive::TMP_DIR)
              %td= link_to lbl, {action: :edit, id: f[:working_dir]}, class: 'process-wip'

    -# files listing
    .title
      %span.is-size-4 Processable archives
      %span.is-size-6.nowrap= "(#{@files.total_count} / #{number_to_human_size ProcessableDoujin.sum(:size), precision: 2, significant: false})"
      
    = form_with url: process_index_path, method: :get,
      html: {onsubmit: %Q|$(this).find('button').addClass('is-loading'); MyApp.show_loading()|,
             id: 'frm_search', class: "filters mb-2 #{'is-hidden' if params[:term].blank?}" } do |f|
      = f.hidden_field :sort_by, value: params[:sort_by]
      
      .field.has-addons.is-justify-content-center
        .control= f.text_field :term, value: params[:term], placeholder: :search, class: 'input is-rounded'
        .control
          = f.button class: 'button is-light is-rounded is-outlined' do
            %span.icon
              %i.mi search
    
    = form_with url: prepare_batch_process_index_path, method: :post do |f|
      = f.hidden_field :term, value: params[:term]
      
      .columns.my-0.is-mobile
        .column.py-0
          .actions.mb-4
            .dropdown.is-hoverable.has-text-left(title="mass actions" onclick="$(this).toggleClass('is-active')")
              .dropdown-trigger
                %button.button(type="button")
                  %span.icon.mr-0.ml-1
                    %i.mi apps
                  %span.is-hidden-touch mass
                  %span.icon.ml-0.is-small
                    %i.mi.mi-small expand_more
              .dropdown-menu
                .dropdown-content
                  .dropdown-item
                    = link_to({job: :preview, sort_by: params[:sort_by], page: params[:page], term: params[:term]},
                              data: {confirm: "Generate previews for #{ProcessIndexPreviewJob::PAGES_TO_PROCESS} pages of entries?"},
                              class: 'button is-info w100 is-justify-content-left') do
                      %span.icon-text
                        %span.icon
                          %i.mi preview
                        %span preview

                  .dropdown-item
                    = link_to({job: :refresh}, class: 'button is-info w100 is-justify-content-left',
                              data: {confirm: 'Rescan to-sort folder?'}) do
                      %span.icon-text
                        %span.icon
                          %i.mi refresh
                        %span rescan
                  .dropdown-item
                    = link_to({job: :group}, class: 'button is-info w100 is-justify-content-left',
                              data: {confirm: 'Compare all covers?'}) do
                      %span.icon-text
                        %span.icon
                          %i.mi image
                        %span compare

            .dropdown.is-hoverable.has-text-left(title="batch actions" onclick="$(this).toggleClass('is-active')")
              = bts_batch_actions = capture do
                .dropdown-trigger
                  %button.button(type="button")
                    %span.icon.mr-0.ml-1
                      %i.mi inventory_2
                    %span.is-hidden-touch batch
                    %span.icon.ml-0.is-small
                      %i.mi.mi-small expand_more
                .dropdown-menu
                  .dropdown-content
                    -# https://stackoverflow.com/questions/3027149/how-do-i-create-multiple-submit-buttons-for-the-same-form-in-rails
                    .dropdown-item
                      = f.button(type: :submit, class: 'button is-danger batch-delete',
                                 formaction: batch_delete_process_index_path,
                                 data: {msg: 'Delete NUM (SIZE) files?', confirm: 'Delete selected files?'}) do
                        %span.icon
                          %i.mi delete_forever
                        %span delete

                    .dropdown-item
                      = f.button(type: :submit, class: 'button is-info',
                                 formaction: batch_merge_process_index_path,
                                 data: {confirm: 'Merge selected files?'}) do
                        %span.icon
                          %i.mi merge
                        %span merge

                    .dropdown-item
                      = f.button type: :submit, class: 'button is-link' do
                        %span.icon
                          %i.mi send
                        %span prepare

                    %hr.dropdown-divider

                    .dropdown-item
                      = f.button(type: :submit, class: 'button is-info',
                                 formaction: batch_rehash_process_index_path(page: 2),
                                 data: {confirm: 'Compare page 2 for selected files?'}) do
                        %span.icon
                          %i.mi looks_two
                        %span page 2

                    .dropdown-item
                      = f.button(type: :submit, class: 'button is-info',
                                 formaction: batch_rehash_process_index_path(page: 3),
                                 data: {confirm: 'Compare page 3 for selected files?'}) do
                        %span.icon
                          %i.mi looks_3
                        %span page 3

                    .dropdown-item
                      = f.button(type: :submit, class: 'button is-info',
                                 formaction: batch_rehash_process_index_path(page: 1),
                                 data: {confirm: 'Compare page 1 for selected files?'}) do
                        %span.icon
                          %i.mi looks_one
                        %span page 1

                    %hr.dropdown-divider

                    .dropdown-item
                      = link_to '#', class: 'bt-toggle-all button',
                        onclick: %Q|$('td.rm-or-batch :checkbox').each(function(){ $(this).prop('checked', !$(this).prop('checked')) }).first(); $.app.update_tot_filesize(); return false| do
                        %span.icon-text
                          %span.icon
                            %i.mi select_all
                          %span select

                    .dropdown-item
                      = link_to '#', class: 'button',
                        onclick: %Q|$('figure.image').toggleClass('is-hidden')| do
                        %span.icon-text
                          %span.icon
                            %i.mi compare
                          %span previews
      
        .column.py-0.pb-2
          -#%span Sort files by
          .field.has-addons.is-justify-content-right
            .control
              .select(style="vertical-align: middle")= select_tag :sort_by,
                options_for_select(ProcessIndexRefreshJob::ORDER, params[:sort_by]),
                onchange: %Q|$('#frm_search').find('input[name="sort_by"]').val($(this).val()).end().submit()|
            .control
              %button.button(type="button" onclick="$('form.filters').toggleClass('is-hidden').find('input[type=\"text\"]').focus()")
                %span.icon
                  %i.mi(title="show search bar") filter_list
                -#%span.is-hidden-touch search
            .control
              %a.button(href="#page-bottom")
                %span.icon
                  %i.mi vertical_align_bottom

      - if @files.empty?
        %em no files to process
      - else
        = page_entries_info @files

        %table.to_process.table.is-striped.is-hoverable
          %tbody
            - idx = 0
            - max_page_weight = Setting[:process_aps].to_f.megabytes
            - @files.each do |f|
              - if @group_sort
                %tr.sep
                  %td.has-background-grey-light(colspan=4)
                    .columns.is-mobile.is-vcentered
                      .column.is-2
                        %hr.has-background-grey
                      .column.is-4.has-text-centered.has-text-grey.has-text-weight-bold
                        = "##{f.id} (#{f.processable_doujin_dupes_childs.size + 1})"
                      .column
                        %hr.has-background-grey
                %tr
              - if @group_sort
                - f.processable_doujin_childs.to_a.unshift(f).sort_by_method(:group_sort_flags).each do |f_child|
                  - pdd = f.processable_doujin_dupes_childs.detect{|pddc| pddc.pd_child_id == f_child.id }
                  = render partial: 'index_row', locals: { f: f_child, idx: idx+=1, pair_data: pdd }
                
                - f.doujinshi.sort{|a,b| a.name <=> b.name }.each do |f_child|
                  - pdd = f.processable_doujin_dupes_childs.detect{|pddc| pddc.doujin_id == f_child.id }
                  = render partial: 'index_row', locals: { f: f_child, idx: idx+=1, pair_data: pdd }
              - else
                = render partial: 'index_row', locals: { f: f, idx: idx+=1, max_page_weight: max_page_weight }
        
        .columns.is-mobile.mt-0.mb-4
          .column.py-0
            .actions
              .dropdown.is-up.is-hoverable.has-text-left(title="batch actions" onclick="$(this).toggleClass('is-active')")
                = bts_batch_actions
          .column.py-0.has-text-right
            %a.button(href="#page-top")
              %span.icon
                %i.mi vertical_align_top
        
        = paginate @files, params: {sort_by: params[:sort_by]}
