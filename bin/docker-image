#!/usr/bin/env ruby

# read APP VERSION
load 'config/initializers/version.rb' rescue nil
raise :no_version_found unless defined?(VERSION)

# read RUBY VERSION
RUBY_VER = File.read('.ruby-version').strip.sub(/.+-([0-9\.]+).*/, '\1') rescue nil
raise :no_version_found unless RUBY_VER

puts "=== App #{VERSION} on Ruby #{RUBY_VER} ==="

IMG_NAME = "ryogachan/djmngr:#{VERSION}"

case ARGV.shift
  when 'build'
    puts "Building image:"
    sleep 2
    
    build_args = {
      'APP_VERSION'  => VERSION,
      'RUBY_VERSION' => RUBY_VER,
    }.map{|k,v| %Q|--build-arg="#{k}=#{v}"| }.join(' ')
    
    opts = '--no-cache' if ARGV.include?('nc')
    
    cmd = %Q| docker build #{build_args} #{opts} -t #{IMG_NAME} . |
    puts cmd
    system cmd, chdir: 'docker'
    system %Q| docker image tag #{IMG_NAME} ryogachan/djmngr:latest |
  
  when 'run'
    puts "Running built image:"
    cmd = %Q| docker run --rm -ti -p 3000:3000 --name trash #{IMG_NAME} |
    puts cmd
    system cmd
  
  when 'sh'
    puts "Opening shell in image:"
    cmd = %Q| docker run --rm -ti -p 3000:3000 --name trash #{IMG_NAME} bash -il |
    puts cmd
    system cmd
  
  when 'exec'
    puts "Opening shell in container:"
    cmd = %Q| docker exec -ti trash bash -il |
    puts cmd
    system cmd
  
  when 'push'
    puts "Logging in:"
    system %Q| docker login |
    
    puts "\nPushing:"
    system %Q| docker push #{IMG_NAME} |
    system %Q| docker push ryogachan/djmngr:latest |
  
  when 'cc'
    puts "Clear builder cache:"
    system %Q| docker builder prune -f |
  
  when 'prune'
    puts "Pruning docker images & system:"
    # https://stackoverflow.com/questions/32490229/how-can-i-delete-docker-images-by-tag-preferably-with-wildcarding/47265229#47265229
    images = `docker images --filter=reference="ryogachan/djmngr*" -q | sort -u`.split("\n")
    system %Q| docker image rm -f #{images.join ' '} |
    system %Q| docker system prune -f |
  
  else
    puts "USAGE: #{File.basename __FILE__} <build [nc]|run|sh|exec|push|cc>"
    puts "    build [nc]      build image, nc=don't use cache"
    puts "    run             run the image with default command"
    puts "    sh              run the image by opening a shell"
    puts "    exec            run a shell in the running image/container"
    puts "    push            push image to docker registry (publish)"
    puts "    cc              clear builder cache"
    puts "    prune           clear built images and docker system"
end
